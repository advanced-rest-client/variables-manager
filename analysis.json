{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "A manager for environments and variables. Non UI element that manages variables\nstate and handle data storage.\n\n### Example\n\n```html\n<variables-manager></variables-manager>\n```\n\n## New in version 2\n\n- PouchDB is optional dependency. Add your own version of PouchDB to use the\ncomponent.\n- Update/Delete actions has been moved to `arc-models/variables-model`",
      "summary": "",
      "path": "variables-manager.js",
      "properties": [
        {
          "name": "environment",
          "type": "string | null | undefined",
          "description": "Currently loaded environment.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 44,
              "column": 6
            },
            "end": {
              "line": 47,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_environmentChanged\"",
              "attributeType": "String"
            }
          }
        },
        {
          "name": "_env",
          "type": "Object | null | undefined",
          "description": "Selected environment object from the data store if different than\n\"default\".",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 52,
              "column": 6
            },
            "end": {
              "line": 52,
              "column": 18
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "_vars",
          "type": "Array | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 53,
              "column": 6
            },
            "end": {
              "line": 53,
              "column": 18
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "variables",
          "type": "Array | null | undefined",
          "description": "List of variables associated with current `environment`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 57,
              "column": 6
            },
            "end": {
              "line": 61,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_appVarsChanged\"",
              "readOnly": true,
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "inMemVariables",
          "type": "Array | null | undefined",
          "description": "List of variables that overrides all existing variables\n(system or app) and exists only in memory.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 66,
              "column": 6
            },
            "end": {
              "line": 66,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "systemVariables",
          "type": "Object",
          "description": "When set it includes system variables into the list of variables.\nThis should be a map of system variables.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 72,
              "column": 6
            },
            "end": {
              "line": 72,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "_sysVars",
          "type": "Array | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 6
            },
            "end": {
              "line": 77,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_sysVarsChanged\"",
              "readOnly": true,
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "initialized",
          "type": "boolean | null | undefined",
          "description": "A flag to determine of the component is fully initialized.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 81,
              "column": 6
            },
            "end": {
              "line": 81,
              "column": 64
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "sysVariablesDisabled",
          "type": "boolean | null | undefined",
          "description": "When set the `_sysVars` will not be computed and therefore included\ninto variables list.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 86,
              "column": 6
            },
            "end": {
              "line": 86,
              "column": 35
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "appVariablesDisabled",
          "type": "boolean | null | undefined",
          "description": "When set the application (local) defined variables are not included.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 90,
              "column": 6
            },
            "end": {
              "line": 90,
              "column": 35
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 108,
              "column": 2
            },
            "end": {
              "line": 111,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_attachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 113,
              "column": 2
            },
            "end": {
              "line": 124,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_detachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 126,
              "column": 2
            },
            "end": {
              "line": 137,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_initialize",
          "description": "Initializes the element.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 141,
              "column": 2
            },
            "end": {
              "line": 163,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeSysVars",
          "description": "Computes list of variables object for system variables",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 170,
              "column": 2
            },
            "end": {
              "line": 189,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "systemVariables",
              "type": "Object",
              "description": "Key - value pairs of system variables"
            },
            {
              "name": "sysVariablesDisabled",
              "type": "Boolean",
              "description": "If true it always returns `false`."
            }
          ],
          "return": {
            "type": "(Array.<Object> | undefined)",
            "desc": "List of variables representing system variables."
          }
        },
        {
          "name": "_envNameHandler",
          "description": "Handler for `environment-current` dispatched by managers to ask\nfor current environment.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 195,
              "column": 2
            },
            "end": {
              "line": 203,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_environmentChanged",
          "description": "Handler for the `environment` property change.\n\nFires a `selected-environment-changed` with a debouncer set to next render\nframe.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 210,
              "column": 2
            },
            "end": {
              "line": 219,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "__environmentChanged",
          "description": "Handler for the `environment` property change.\n\nFires a `selected-environment-changed` custom event and updates list of variables\nin the environment.",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 229,
              "column": 2
            },
            "end": {
              "line": 255,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "environment",
              "type": "String"
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_readEnvObjectData",
          "description": "Reads environment object from the data stopre if different than `default`.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 263,
              "column": 2
            },
            "end": {
              "line": 292,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "environment",
              "type": "String",
              "description": "Environment value."
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "listAllVariables",
          "description": "Lists app, sys and in mem variables into single array.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 298,
              "column": 2
            },
            "end": {
              "line": 330,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Array.<Object>",
            "desc": "List of all variables."
          }
        },
        {
          "name": "_notifyVarsListChanged",
          "description": "Combines both app variables and in memory variables\nand informs listeners about the change.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 335,
              "column": 2
            },
            "end": {
              "line": 344,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_updateVariablesList",
          "description": "Updates the list of variables for current environment.\n\nThis task is asynchronus.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 352,
              "column": 2
            },
            "end": {
              "line": 395,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise with the list of variables for the\nenvironment."
          }
        },
        {
          "name": "_handleException",
          "description": "Handles exceptions when occur by logging them to the console and\nsending an analytics report.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 402,
              "column": 2
            },
            "end": {
              "line": 413,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "cause",
              "type": "Error",
              "description": "An error object with description."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_envChnageHandler",
          "description": "A handler for the `selected-environment-changed` custom event.\nUpdates the `environment` property if the event was sent by other elemenet\nthan `this`.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 421,
              "column": 2
            },
            "end": {
              "line": 428,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_dataImportHandler",
          "description": "Handler for the `data-imported` custom event. Refreshes list of environmants\nand variables.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 433,
              "column": 2
            },
            "end": {
              "line": 435,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onDatabaseDestroy",
          "description": "Handler for the `datastore-destroyed` custom event.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 441,
              "column": 2
            },
            "end": {
              "line": 459,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_eventCancelled",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 461,
              "column": 2
            },
            "end": {
              "line": 469,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_cancelEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 471,
              "column": 2
            },
            "end": {
              "line": 474,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_envUpdateHandler",
          "description": "A handler for the `environment-updated` custom event.\nUpdates the environment in the data store.\n\nThe `environment-updated` custom event should be cancellable or the event\nwon't be handled at all.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 484,
              "column": 2
            },
            "end": {
              "line": 496,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_envDeleteHandler",
          "description": "A handler for the `environment-deleted` custom event.\nIf deleted environment is current environment then it sets environment\nto `default`.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 504,
              "column": 2
            },
            "end": {
              "line": 513,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_varUpdateHandler",
          "description": "A handler for the `variable-updated` custom event.\nUpdates the variable in the variables list if the environment name match.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 519,
              "column": 2
            },
            "end": {
              "line": 538,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_varDeleteHandler",
          "description": "Removes the valiable from the lsit of variables if the variable is\nin the list.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 545,
              "column": 2
            },
            "end": {
              "line": 556,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "Event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_varStoreActionHandler",
          "description": "A handler for `variable-store-action` dispatched by request actions logic.\nCreates / updates a variable with new data.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 563,
              "column": 2
            },
            "end": {
              "line": 586,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_variableIndexByName",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 591,
              "column": 2
            },
            "end": {
              "line": 596,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": "Variable name"
            }
          ],
          "return": {
            "type": "Number",
            "desc": "Index of the variable in the variables list or -1."
          }
        },
        {
          "name": "_updateVariable",
          "description": "Dispatches variable updated custom event to the model.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 602,
              "column": 2
            },
            "end": {
              "line": 616,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "Object",
              "description": "Variable to update"
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_varUpdateActionHandler",
          "description": "In memory variable change - without storing it to the store.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 621,
              "column": 2
            },
            "end": {
              "line": 644,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_sysVarsChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 646,
              "column": 2
            },
            "end": {
              "line": 651,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeAppVars",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 653,
              "column": 2
            },
            "end": {
              "line": 658,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "record"
            },
            {
              "name": "appVariablesDisabled"
            }
          ]
        },
        {
          "name": "_appVarsChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 660,
              "column": 2
            },
            "end": {
              "line": 665,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 38,
          "column": 0
        },
        "end": {
          "line": 692,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "LogicElements.VariablesManager",
      "attributes": [
        {
          "name": "environment",
          "description": "Currently loaded environment.",
          "sourceRange": {
            "start": {
              "line": 44,
              "column": 6
            },
            "end": {
              "line": 47,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "variables",
          "description": "List of variables associated with current `environment`.",
          "sourceRange": {
            "start": {
              "line": 57,
              "column": 6
            },
            "end": {
              "line": 61,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "in-mem-variables",
          "description": "List of variables that overrides all existing variables\n(system or app) and exists only in memory.",
          "sourceRange": {
            "start": {
              "line": 66,
              "column": 6
            },
            "end": {
              "line": 66,
              "column": 27
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "system-variables",
          "description": "When set it includes system variables into the list of variables.\nThis should be a map of system variables.",
          "sourceRange": {
            "start": {
              "line": 72,
              "column": 6
            },
            "end": {
              "line": 72,
              "column": 29
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "initialized",
          "description": "A flag to determine of the component is fully initialized.",
          "sourceRange": {
            "start": {
              "line": 81,
              "column": 6
            },
            "end": {
              "line": 81,
              "column": 64
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "sys-variables-disabled",
          "description": "When set the `_sysVars` will not be computed and therefore included\ninto variables list.",
          "sourceRange": {
            "start": {
              "line": 86,
              "column": 6
            },
            "end": {
              "line": 86,
              "column": 35
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "app-variables-disabled",
          "description": "When set the application (local) defined variables are not included.",
          "sourceRange": {
            "start": {
              "line": 90,
              "column": 6
            },
            "end": {
              "line": 90,
              "column": 35
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "selected-environment-changed",
          "description": "Fired when selected environment has changed.\nThis event is not fired if the change has been causes by the\n`selected-environment-changed` fired by other element.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "variable-updated",
          "description": "Dispatched when store variable request action is handled.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "variables-list-changed",
          "description": "Fired when the list of variables for current environment has been read\nand set. UIs should update list of current varables from\nthis events.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "initialized-changed",
          "description": "Fired when the `initialized` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "variables-manager",
      "mixins": [
        "EventsTargetMixin"
      ]
    }
  ]
}
